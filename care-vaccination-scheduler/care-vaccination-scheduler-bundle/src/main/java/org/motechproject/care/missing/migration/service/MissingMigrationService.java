package org.motechproject.care.missing.migration.service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.motechproject.care.schedule.vaccinations.ChildVaccinationSchedule;
import org.motechproject.care.schedule.vaccinations.MotherVaccinationSchedule;
import org.motechproject.care.service.schedule.Anc4Service;
import org.motechproject.care.service.schedule.AncService;
import org.motechproject.care.service.schedule.BcgService;
import org.motechproject.care.service.schedule.ChildCareService;
import org.motechproject.care.service.schedule.DptBoosterService;
import org.motechproject.care.service.schedule.DptService;
import org.motechproject.care.service.schedule.Hep0Service;
import org.motechproject.care.service.schedule.HepService;
import org.motechproject.care.service.schedule.MeaslesBoosterService;
import org.motechproject.care.service.schedule.MeaslesService;
import org.motechproject.care.service.schedule.MotherCareService;
import org.motechproject.care.service.schedule.Opv0Service;
import org.motechproject.care.service.schedule.OpvBoosterService;
import org.motechproject.care.service.schedule.OpvService;
import org.motechproject.care.service.schedule.TTBoosterService;
import org.motechproject.care.service.schedule.TTService;
import org.motechproject.care.service.schedule.VitaService;
import org.motechproject.care.service.util.CommcareTask;
import org.motechproject.casexml.gateway.CommcareCaseGateway;
import org.motechproject.mcts.care.common.mds.dimension.ChildCase;
import org.motechproject.mcts.care.common.mds.dimension.MotherCase;
import org.motechproject.mcts.care.common.mds.domain.CareCaseTask;
import org.motechproject.mcts.care.common.mds.repository.MdsRepository;
import org.motechproject.scheduletracking.domain.Enrollment;
import org.motechproject.scheduletracking.service.EnrollmentAlertServiceToExport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

@Service
public class MissingMigrationService {
	 
	private static final Logger LOGGER = Logger.getLogger(MissingMigrationService.class);
	
	private static final String COMMCARE_HQ_URL = "https://india.commcarehq.org/a/care-bihar/receiver/";
	
	private static final String COMMCARE_USERNAME = "motech_care@thoughtworks.com";
	
	private static final String COMMCARE_PASSWORD = "parkingProcess0z.24";
    
    @Resource(name = "careDataSource")
    private DataSource careDataSource;
    
    @Autowired
    MdsRepository dbRepository; 
    
    @Autowired
    TTService ttService;
    
    @Autowired
    TTBoosterService ttBoosterService;
    
    @Autowired
    AncService ancService;
    
    @Autowired
    Anc4Service anc4Service;
    
    @Autowired 
    MotherCareService motherCareService;
    
    @Autowired 
    MeaslesService measlesService;
    
    @Autowired
    MeaslesBoosterService measlesBoosterService;
    
    @Autowired
    BcgService bcgService;
    
    @Autowired
    VitaService vitaService;
    
    @Autowired
    Hep0Service hep0Service;
    
    @Autowired
    HepService hepService;
    
    @Autowired
    DptService dptService;
    
    @Autowired
    DptBoosterService dptBoosterService;
    
    @Autowired
    Opv0Service opv0Service;
    
    @Autowired
    OpvService opvService;
    
    @Autowired
    OpvBoosterService opvBoosterService;
    
    @Autowired
    ChildCareService childCareService;
    
    @Autowired
    private EnrollmentAlertServiceToExport enrollmentAlertServiceToExportOSGi;
    
    @Autowired
    private CommcareCaseGateway commcareCaseGateway;
    
    
    private int vaccinationCountMother;
    
    private int vaccinationCountChild;
    
    List<String> schedulesLstAllMot = new ArrayList<String>();
    List<String> schedulesLstAllChild = new ArrayList<String>();
    List<Integer> AllMissingTasks = new ArrayList<Integer>();
    
    public MissingMigrationService() {
    	
    	Integer[] missingTasks = {};
    	AllMissingTasks = Arrays.asList(missingTasks);
    	schedulesLstAllMot =  new ArrayList<String>();
    	schedulesLstAllMot.add(MotherVaccinationSchedule.TT.getName());
    	schedulesLstAllMot.add(MotherVaccinationSchedule.TTBooster.getName());
    	schedulesLstAllMot.add(MotherVaccinationSchedule.Anc.getName());
    	schedulesLstAllMot.add(MotherVaccinationSchedule.Anc4.getName());
    	schedulesLstAllMot.add("Mother Care");
    	schedulesLstAllChild = new ArrayList<String>();
    	schedulesLstAllChild.add(ChildVaccinationSchedule.Bcg.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.DPT.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.DPTBooster.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.Hepatitis.getName());
    	schedulesLstAllChild.add("Child Care");
    	schedulesLstAllChild.add(ChildVaccinationSchedule.Hepatitis0.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.Measles.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.MeaslesBooster.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.OPV.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.OPV0.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.OPVBooster.getName());
    	schedulesLstAllChild.add(ChildVaccinationSchedule.Vita.getName());
    	
		
	}
    
    
    public void enrollAllMissingMotherVaccines(){
    	 vaccinationCountMother =1;
    	 List<Map<String, Object>> mothers = getMothers();
         
    	 LOGGER.info("Total Number of mothers fetched "+mothers.size());
         
    	 int motherCount = 1;
         
    	 for (Map<String, Object> caseMap : mothers) {
        	 
        	 LOGGER.info("Started Processing **** Mother "+motherCount+" :" +caseMap.get("caseId"));
        	 try {
              MotherCase mother = dbRepository.get(MotherCase.class, "caseId", caseMap.get("caseId"));
              LOGGER.info("Processing case name"+ mother.getCaseName());
              enrollUpdateMotherVaccine(mother,caseMap.get("schedules").toString());
        	 } catch (Exception e) {
        		 LOGGER.info("Failed Processing mother"+e.getMessage());
        	 }
        	  
        	 LOGGER.info("Processed mother vaccinations.....");
        	 motherCount++;
 		}
    	 LOGGER.info("Total Vaccinations processed for mother "+vaccinationCountMother);
    	
    }
    
    
    
    public void enrollAllMissingChildVaccines() {
    	 List<Map<String, Object>> childs = getChilds();
         LOGGER.info("Total Number of childs fetched "+childs.size());
        
         int childCount = 1;
         vaccinationCountChild=1;
        
         
         for (Map<String, Object> caseMap : childs) {
        	 
        	 LOGGER.info("Started Processing **** Child "+childCount+" :" +caseMap.get("caseId"));
        	 try {
        	 ChildCase child = dbRepository.get(ChildCase.class, "caseId", caseMap.get("caseId"));
        	 LOGGER.info("Processing case name"+ child.getCaseName());
        	 enrollUpdateChildVaccine(child,caseMap.get("schedules").toString());
        	 }  catch (Exception e) {
        		 LOGGER.info("Failed Processing mother"+e.getMessage());
        	 }
        	 LOGGER.info("Processed child vaccinations.......");
        	 childCount++;

         }
         LOGGER.info("Total Vaccinations processed for child "+vaccinationCountChild);
    }
    
    
    private void enrollUpdateMotherVaccine(MotherCase mother, String schedules) {
    	LOGGER.info("Already scheduled vaccines"+ schedules);
    	List<String> schedulesLst =Arrays.asList(schedules.split(","));
    	List<String> toRun = new ArrayList<String>(schedulesLstAllMot);
    	toRun.removeAll(schedulesLst);
    	
    	for (String schedule : toRun) {
    		if(schedule.equals(MotherVaccinationSchedule.TT.getName())) {
    			LOGGER.info("Enrolling mother with case id in "+ MotherVaccinationSchedule.TT);
    			ttService.process(mother);
    			vaccinationCountMother++;
    		}
    		if(schedule.equals(MotherVaccinationSchedule.TTBooster.getName())) {
    			LOGGER.info("Enrolling mother with case id in "+ MotherVaccinationSchedule.TTBooster);
    			ttBoosterService.process(mother);
    			vaccinationCountMother++;
    		}
    		if(schedule.equals(MotherVaccinationSchedule.Anc.getName())) {
    			LOGGER.info("Enrolling mother with case id in "+ MotherVaccinationSchedule.Anc);
    			ancService.process(mother);
    			vaccinationCountMother++;
    		}
    		if(schedule.equals(MotherVaccinationSchedule.Anc4.getName())) {
    			LOGGER.info("Enrolling mother with case id in "+ MotherVaccinationSchedule.Anc4);
    			anc4Service.process(mother);
    			vaccinationCountMother++;
    		}
    		if(schedule.equals("Mother Care")) {
    			LOGGER.info("Enrolling mother with case id in Mother Care");
    			motherCareService.process(mother);
    			vaccinationCountMother++;
    		}
    	
		}	
    }
 
    
    private void enrollUpdateChildVaccine(ChildCase child, String schedules) {
    	LOGGER.info("Already scheduled vaccines"+ schedules);
    	List<String> schedulesLst =Arrays.asList(schedules.split(","));
    	
    	List<String> toRun = new ArrayList<String>(schedulesLstAllChild);
    	toRun.removeAll(schedulesLst);
    	
    	for (String schedule : toRun) {
    		if(schedule.equals(ChildVaccinationSchedule.Measles.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.Measles);
    			measlesService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.MeaslesBooster.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.MeaslesBooster);
    			measlesBoosterService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.Bcg.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.Bcg);
    			bcgService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.Vita.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.Vita);
    			vitaService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.Hepatitis0.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.Hepatitis0);
    			hep0Service.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.Hepatitis.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.Hepatitis);
    			hepService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.DPT.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.DPT);
    			dptService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.DPTBooster.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.DPTBooster);
    			dptBoosterService.process(child);
    		}
    		if(schedule.equals(ChildVaccinationSchedule.OPV0.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.OPV0);
    			opv0Service.process(child);
    		}
    		if(schedule.equals(ChildVaccinationSchedule.OPV.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.OPV);
    			opvService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals(ChildVaccinationSchedule.OPVBooster.getName())) {
    			LOGGER.info("Enrolling child with case id in "+ ChildVaccinationSchedule.OPVBooster);
    			opvBoosterService.process(child);
    			vaccinationCountChild++;
    		}
    		if(schedule.equals("Child Care")) {
    			LOGGER.info("Enrolling child with case id in Child Care");
    			childCareService.process(child);
    			vaccinationCountChild++;
    		}
		}
    }
 
	
    private List<Map<String, Object>> getMothers(){
    	JdbcTemplate jdbcTemplate = new JdbcTemplate(careDataSource);	
   		return jdbcTemplate.queryForList("select caseId, group_concat( distinct e.scheduleName) as schedules  from CARE_MCTS_COMMON_ENTITIES_MOTHERCASE m inner join SCHEDULE_TRACKING_MODULES_ENROLLMENT e on m.caseId=e.externalId where m.edd >= '2015-4-10' and actualDeliveryDate is null group by m.caseId"); 
    }
    
    
    private List<Map<String, Object>> getChilds(){
    	JdbcTemplate jdbcTemplate = new JdbcTemplate(careDataSource);
   		return jdbcTemplate.queryForList("select caseId, group_concat( distinct e.scheduleName) as schedules  from CARE_MCTS_COMMON_ENTITIES_CHILDCASE cc inner join SCHEDULE_TRACKING_MODULES_ENROLLMENT e on cc.caseId=e.externalId where cc.dob >= '2013-04-08' group by cc.caseId"); 
    }
    
  
    
	
    public void scheduleEnrollment() {
    	
    	List<Enrollment> enrollments = getAllEnrollments();
    	for (Enrollment enrollment : enrollments) {
    		LOGGER.info("Sending alert  for Enrollment : "+enrollment.getCurrentMilestoneName());
    		enrollmentAlertServiceToExportOSGi.scheduleAlertsForCurrentMilestone(enrollment);
			LOGGER.info("Sent alert  for Enrollment : "+enrollment.getCurrentMilestoneName());
		}
    }
    
    private List<Enrollment> getAllEnrollments() {
    	
         List<Enrollment> enrollments = new ArrayList<Enrollment>();
         for (Integer primaryId : AllMissingTasks) {
        	 LOGGER.info("Fetching Enrollment for unique key : "+primaryId);
        	 Enrollment enrollment = dbRepository.getObjectByPrimaryKey(Enrollment.class, primaryId);
        	 LOGGER.info("Fetched Enrollment with current milestone : "+enrollment.getCurrentMilestoneName());
        	enrollments.add(enrollment);
		}
    	return enrollments;    
    }
    
    private List<Map<String, Object>> getTasksTobeClosed (){
    	JdbcTemplate jdbcTemplate = new JdbcTemplate(careDataSource);	
   		return jdbcTemplate.queryForList(""); 
    }
    
    public void closeAllCases() throws IOException {
    	
    	List<String> careCaseTasks = readAllCareCaseId();
    	  int counter = 1;
    	  for (String caseId : careCaseTasks) {
    		  LOGGER.info(counter+". Sending close case for Care Case Task with id"+caseId);
    			  postCloseToCommCare(caseId);
    			  counter++;
    		  }
    	   LOGGER.info("Total case closed :"+counter);
    }
    
    protected void postCloseToCommCare(String careCaseTaskId) {
    	
        String commcareUrl = COMMCARE_HQ_URL;
        String commcareUsername = COMMCARE_USERNAME;
        String commcarePassword = COMMCARE_PASSWORD;

        CareCaseTask careCaseTask = dbRepository.get(CareCaseTask.class, "caseId", careCaseTaskId);

        LOGGER.info(String
                .format("Notifying commcare to close task with -- TaskId: %s ",
                        careCaseTask.getCaseId()));
       commcareCaseGateway.closeCase(commcareUrl, CommcareTask.toCaseTask(careCaseTask), commcareUsername,commcarePassword, null);
       
    }
  
    
    private List<String> readAllCareCaseId() throws IOException {
    	List<String> careCaseTasks = new ArrayList<String>();
    	LOGGER.info("Loading Resource");
    	String fileLocation = "/home/naveen/skype_downloads/tobeclosed.txt";
    	@SuppressWarnings("resource")
		BufferedReader bufferedReader = new BufferedReader(new FileReader(fileLocation));
    	      String CareCaseTaskId;
    	      int counter =1;
    	      while ((CareCaseTaskId = bufferedReader.readLine()) != null) {
			     LOGGER.info(counter+". Fetched Care Case Task Id : "+CareCaseTaskId);
				careCaseTasks.add(CareCaseTaskId);
				counter++;
			}
    	return careCaseTasks;
    }


}
